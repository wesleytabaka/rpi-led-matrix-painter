# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, implementation ]
  pull_request:
    branches: [ main, implementation ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      job-status: ${{ job.status }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
    # Update references
      - name: Git Sumbodule Update
        run: |
          git pull --recurse-submodules
          git submodule update --remote --recursive

      # Runs a single command using the runners shell
      - uses: actions/setup-node@v1
      #- run: ls -la ./rpi-led-matrix # Debugging
      - run: npm i -g rimraf typescript
      - run: npm install --prefix=./rpi-led-matrix --also=dev # also install devDependencies
      #- run: ls -la ./rpi-led-matrix/node_modules # Debugging
      #- run: ls -la ./node_modules
      - run: npm run build --prefix=./rpi-led-matrix
      - run: npm install
      #- run: ls -la ./node_modules # Debugging
      - run: npm run build

  email:
    runs-on: ubuntu-latest
    if: always()
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2

      - name: github
        run: echo "${{ toJson(github) }}"
      - name: job
        run: echo "${{ toJson(job) }}"
      #- name: get SHA1
      #  run: echo ${{ github.sha }} | cut -b -7
      #- name: get subject
      #  run: echo [${{ github.repository }}] Build ${{ job.status }} - ${{ github.ref }} \(${{ github.sha }}\)
      #- name: get subject 2
      #  run: echo [${{ github.repository }}] Build ${{ job.status }} - ${{ github.ref }} \($(echo ${{github.sha}} | cut -b -7)\)
        
      - id: setEmailSubject
        name: set subject
        run: echo "::set-output name=EMAIL_SUBJECT::$( echo [${{ github.repository }}] ${{ github.workflow }} \#${{ github.run_number }} resulted in  ${{ needs.build.outputs.job-status }} - ${{ github.ref }} \()$( echo ${{github.sha}} | cut -b -7 )$( echo \))"

        #run: echo "::set-env name=EMAIL_SUBJECT::$( echo [${{ github.repository }}] Build ${{ job.status }} - ${{ github.ref }} \() $( echo ${{github.sha}} | cut -b -7 )$( echo \))"
      #- name: get subject
      #  run: echo ${{ steps.setEmailSubject.outputs.EMAIL_SUBJECT }}

      - name: Send email
      # You may pin to the exact commit or the version.
      # uses: dawidd6/action-send-mail@4ef78fc1817f8478e8343a70cf4b121c2b162415
        uses: dawidd6/action-send-mail@v3.5.0
        with:
          # SMTP server address
          server_address: ${{ secrets.EMAIL_SMTP_SERVER }} 
          # SMTP server port
          server_port: 587
          # Authenticate as this user to SMTP server
          username: ${{ secrets.EMAIL_USERNAME }} #
          # Authenticate with this password to SMTP server
          password: ${{ secrets.EMAIL_PASSWORD }} # optional
          # Subject of mail message
          subject: ${{ steps.setEmailSubject.outputs.EMAIL_SUBJECT }}
          # Recipients mail addresses (separated with comma)
          to: ${{ github.event.pusher.name }} <${{ github.event.pusher.email }}> #Wesley Tabaka <wesley@wesleytabaka.com> #${{ github.event.repository.owner.email }} <${{ github.event.repository.owner.name }}>,
          # Full name of mail sender (might be with an email address specified in <>)
          from: Wesley Tabaka <wesley@wesleytabaka.com>
          # Whether this connection use TLS (default is true if server_port is 465)
          # secure: true # optional
          # Body of mail message (might be a filename prefixed with file:// to read from)
          body: |
            ${{ steps.setEmailSubject.outputs.EMAIL_SUBJECT }}
            ${{ toJSON(github.event.commits) }}
          # HTML body of mail message (might be a filename prefixed with file:// to read from)
          #html_body: # optional
          # Carbon copy recipients (separated with comma)
          #cc: # optional
          # Blind carbon copy recipients (separated with comma)
          #bcc: # optional
          # An email address that will appear on the Reply-To field
          #reply_to: # optional
          # Allow unsigned/invalid certificates
          #ignore_cert: # optional
          # Convert body from Markdown to HTML (set content_type input as text/html too)
          #convert_markdown: # optional
          # Files that will be added to mail message attachments (separated with comma)
          #attachments: # optional
          # Set Priority level for the mail message to 'high', 'normal' (default) or 'low'
          #priority: # optional
          #tiny change23 - added to spam whitelist
